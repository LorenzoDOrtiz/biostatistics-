setwd("C:/Users/ortizlo/OneDrive - Central Washington University/BIO 213 Lab/Lab 5")
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(dataset$sepal.width[dataset$species == "setosa"])
library(nortest)
ad.test(dataset$sepal.width[dataset$species == "setosa"])
ad.test(dataset$sepal.width[dataset$species == "setosa"])
ad.test(iris$setosa.width[iris$setosa == "setosa"])
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$setosa ~ dataset$virginica, alternative =
"two.sided", paired = F)
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$setosa ~ iris$virginica, alternative =
"two.sided", paired = F)
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
barplot(13/22, col="gray", ylim=c(0, 1))
barplot(3.428,2.974, col="gray", ylim=c(0, 1))
means <- c(3.428,2.974)
barplot(means, col="gray", ylim=c(0, 1))
barplot(means, col="gray", ylim=c(0, 3.5))
irismeans <- c(3.428,2.974)
barplot(irismeans, col="gray", ylim=c(0, 3.5))
remove(means)
barplot(irismeans, col="gray", xlab="Mean", ylab="",ylim=c(0, 3.5))
barplot(irismeans, col="gray", xlab="", ylab="Mean",ylim=c(0, 3.5))
barplot(irismeans, col="gray", xlab1="test", ylab="Mean",ylim=c(0, 3.5))
confidence.interval <- c(0.3142808,0.5937192)
barplot(irismeans, col="gray", xlab="test", ylab="Mean",ylim=c(0, 3.5))
barplot(irismeans, col="gray", xlab="Setosa Virginica", ylab="Mean",ylim=c(0, 3.5))
barplot(irismeans, col="gray", xlab="Setosa               Virginica", ylab="Mean",ylim=c(0, 3.5))
barplot(irismeans, col="gray", xlab="Setosa                   Virginica", ylab="Mean",ylim=c(0, 3.5))
barplot(irismeans, col="gray", xlab="Setosa                      Virginica", ylab="Mean",ylim=c(0, 3.5))
barplot(irismeans, col="gray", xlab="Setosa                Virginica", ylab="Mean",ylim=c(0, 3.5))
segments(0..5, 0.3142808, .5, 0.5937192, lwd = 1, col="black")
segments(0.5, 0.3142808, .5, 0.5937192, lwd = 1, col="black")
binom.test(13,22,.4038,"two.sided")
# binom.test(x, n, p, "alternative")
# • x is the number of “successes” (in this case the number of instances of sexual                                cannibalism)
# • n is the number of trials (in this case the total number of random matings)
# • p is the probability of success if the null hypothesis is true (the proportion of                                                             sexual cannibalism found from the other species of spider)
# • "alternative" should be replaced with "two.sided", "less", or "greater"
barplot(13/22, col="gray", ylim=c(0, 1), ylab="Proportion of
cannibalistic matings")
# bar plot creation
segments(0.7, 0.3635470, 0.7, 0.7929069, lwd = 1, col="black")
# error bars, .36 and .79 are confidence intervals from binom.test results
abline(.4038,0,lty=3, col = "red")
# Add a line indicating the hypothesized proportion of cannibalistic matings you used for thenull hypothesis and in the binomial test.
antlion <- read.table(file = "Lab3_DATA.csv", header = TRUE, sep = ",")
abline(.4038,0,lty=3, col = "red")
binom.test(13,22,.4038,"two.sided")
# binom.test(x, n, p, "alternative")
# • x is the number of “successes” (in this case the number of instances of sexual                                cannibalism)
# • n is the number of trials (in this case the total number of random matings)
# • p is the probability of success if the null hypothesis is true (the proportion of                                                             sexual cannibalism found from the other species of spider)
# • "alternative" should be replaced with "two.sided", "less", or "greater"
barplot(13/22, col="gray", ylim=c(0, 1), ylab="Proportion of
cannibalistic matings")
# bar plot creation
#segments(0.7, 0.3635470, 0.7, 0.7929069, lwd = 1, col="black")
# error bars, .36 and .79 are confidence intervals from binom.test results
abline(.4038,0,lty=3, col = "red")
# Add a line indicating the hypothesized proportion of cannibalistic matings you used for thenull hypothesis and in the binomial test.
antlion <- read.table(file = "Lab3_DATA.csv", header = TRUE, sep = ",")
binom.test(13,22,.4038,"two.sided")
# binom.test(x, n, p, "alternative")
# • x is the number of “successes” (in this case the number of instances of sexual                                cannibalism)
# • n is the number of trials (in this case the total number of random matings)
# • p is the probability of success if the null hypothesis is true (the proportion of                                                             sexual cannibalism found from the other species of spider)
# • "alternative" should be replaced with "two.sided", "less", or "greater"
barplot(13/22, col="gray", ylim=c(0, 1), ylab="Proportion of
cannibalistic matings")
# bar plot creation
segments(0.7, 0.3635470, 0.7, 0.7929069, lwd = 1, col="black")
# error bars, .36 and .79 are confidence intervals from binom.test results
abline(.4038,0,lty=3, col = "red")
# Add a line indicating the hypothesized proportion of cannibalistic matings you used for thenull hypothesis and in the binomial test.
antlion <- read.table(file = "Lab3_DATA.csv", header = TRUE, sep = ",")
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
irismeans <- c(3.428,2.974)
barplot(irismeans, col="gray", xlab="Setosa                Virginica", ylab="Mean",ylim=c(0, 3.5))
confidence.interval <- c(0.3142808,0.5937192)
segments(0.5, 0.3142808, .5, 0.5937192, lwd = 1, col="black")
segments(0.7, 0.3142808, .7, 0.5937192, lwd = 1, col="black")
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
irismeans <- c(3.428,2.974)
barplot(irismeans, col="gray", xlab="Setosa                Virginica", ylab="Mean",ylim=c(0, 3.5))
confidence.interval <- c(0.3142808,0.5937192)
segments(0.7, 0.3142808, .7, 0.5937192, lwd = 1, col="black")
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
plotmeans(lengths ~ labels, xlab = "Sample Size", ylab = "Length (mm)", connect = FALSE, n.label = FALSE)
remove(confidence.interval)
help(plotmeans)
install.packages("gplots")
library(gplots)
plotmeans(means ~ labels, xlab = "Sample Size", ylab = "Length (mm)", connect = FALSE, n.label = FALSE)
install.packages("gplots")
library(gplots)
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
means <- c(3.428,2.974 )
plotmeans(means ~ labels, xlab = "Sample Size", ylab = "Length (mm)", connect = FALSE, n.label = FALSE)
install.packages("gplots")
plotmeans(means ~ labels, xlab = "Sample Size", ylab = "Length (mm)", connect = FALSE, n.label = FALSE)
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width, connect = FALSE, n.label = FALSE)
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width", connect = FALSE, n.label = FALSE)
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width", connect = FALSE, n.label = FALSE)
library(gplots)
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width", connect = FALSE, n.label = FALSE)
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width (cm)", connect = FALSE, n.label = FALSE)
remove(means)
chick <- read.table("chick.csv", header=T, sep=",")
ad.test([chick$feed.type == "sunflower"])
ad.test(chick$feed.type == "sunflower")
library(nortest)
ad.test(chick$feed.type == "sunflower")
ad.test(chick$feed.type == "linseed"])
ad.test(chick$feed.type == "linseed")
ad.test(1/chick$chick.weight[chick#feed.type == "sunflower]))
ad.test(1/chick$chick.weight[chick#feed.type == "sunflower]))
ad.test(1/chick$chick.weight[chick$feed.type == "sunflower]))
ad.test(chick$chick.weight[chick$feed.type == "sunflower]))
ad.test(chick$chick.weight[chick$feed.type == "sunflower])
ad.test(chick$chick.weight[chick$feed.type == "sunflower])
ad.test(chick$chick.weight[chick$feed.type == "sunflower"])
ad.test(chick$chick.weight[chick$feed.type == "linseed"])
wilcox.test(chick$chick.weight ~ chicken$feed.type, alternative =
"two.sided", paired = F)
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = T)
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
cler
clear
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
install.packages("gplots")
library(gplots)
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width (cm)", connect = FALSE, n.label = FALSE)
chick <- read.table("chick.csv", header=T, sep=",")
ad.test(chick$chick.weight[chick$feed.type == "linseed"])
ad.test(chick$chick.weight[chick$feed.type == "sunflower"])
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
install.packages("gplots")
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
boxplot(wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)     )
boxplot(chick$chick.weight ~ chick$feed.type)
boxplot(chick$chick.weight ~ chick$feed.type, data=chick)
boxplot(chick$chick.weight ~ chick$feed.type, data=chick)
boxplot(chick$chick.weight ~ chick$feed.type, data=chick,xlab = "Chick Feed Type", ylab = "Chick Weight (non descript unit)")
boxplot(chick$chick.weight ~ chick$feed.type, data=chick,xlab = "Chick Feed Type", ylab = "Chick Weight (grams)")
#######################
lizard <- read.table("lizard.csv", header=T, sep=",")
ad.test(lizard$rbc.count[lizard$status == "infected"])
library(nortest)
ad.test(lizard$rbc.count[lizard$status == "infected"])
ad.test(lizard$rbc.count[lizard$status == "noninfected"])
t.test(lizard$rbc.count ~ lizard$status, alternative =
"two.sided", paired = F)
ad.test(log.rbc.count)
ad.test(log.status)
log.rbc.count <- log(lizard$rbc.count, 10)
install.packages("gplots")
library(gplots)
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
#####################
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width (cm)", connect = FALSE, n.label = FALSE)
chick <- read.table("chick.csv", header=T, sep=",")
ad.test(chick$chick.weight[chick$feed.type == "linseed"])
ad.test(chick$chick.weight[chick$feed.type == "sunflower"])
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
boxplot(chick$chick.weight ~ chick$feed.type, data=chick,xlab = "Chick Feed Type", ylab = "Chick Weight (grams)")
#######################
lizard <- read.table("lizard.csv", header=T, sep=",")
ad.test(log(lizard$rbc.count[lizard$status == "infected"])
ad.test(log(lizard$rbc.count[lizard$status == "noninfected"])
ad.test(log(lizard$rbc.count[lizard$status == "infected"]))
ad.test(log(lizard$rbc.count[lizard$status == "noninfected"]))
hist(log(lizard$rbc.count[lizard$status=="infected"]))
hist(log(lizard$rbc.count[lizard$status=="noninfected"]))
hist(log(lizard$rbc.count[lizard$status=="infected"])xlab = "Infected RBC Count", ylab = "Non Infected RBC Count")
hist(log(lizard$rbc.count[lizard$status=="infected"])xlab = "Infected RBC Count", ylab = "Non Infected RBC Count")
hist(log(lizard$rbc.count[lizard$status=="infected"],xlab = "Infected RBC Count", ylab = "Non Infected RBC Count")
hist(log(lizard$rbc.count[lizard$status=="infected"]), xlab = "test")
hist(log(lizard$rbc.count[lizard$status=="infected"]),xlab="test")
hist(log(lizard$rbc.count[lizard$status=="infected"]),xlab="RBC Count")
hist(log(lizard$rbc.count[lizard$status=="noninfected"])xlab="RBC Count")
hist(log(lizard$rbc.count[lizard$status=="noninfected"]),xlab="RBC Count")
hist(log(lizard$rbc.count[lizard$status=="infected"]),xlab="RBC Count", main = "")
hist(log(lizard$rbc.count[lizard$status=="noninfected"]),xlab="RBC Count", main = "")
install.packages("gplots")
library(gplots)
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
#####################
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width (cm)", connect = FALSE, n.label = FALSE)
chick <- read.table("chick.csv", header=T, sep=",")
ad.test(chick$chick.weight[chick$feed.type == "linseed"])
ad.test(chick$chick.weight[chick$feed.type == "sunflower"])
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
boxplot(chick$chick.weight ~ chick$feed.type, data=chick,xlab = "Chick Feed Type", ylab = "Chick Weight (grams)")
#######################
lizard <- read.table("lizard.csv", header=T, sep=",")
ad.test(log(lizard$rbc.count[lizard$status == "infected"]))
ad.test(log(lizard$rbc.count[lizard$status == "noninfected"]))
hist(log(lizard$rbc.count[lizard$status=="infected"]),xlab="RBC Count", main = "")
hist(log(lizard$rbc.count[lizard$status=="noninfected"]),xlab="RBC Count", main = "")
t.test(lizard$rbc.count ~ lizard$status, alternative =
"two.sided", paired = F)
install.packages("gplots")
hist(log(lizard$rbc.count[lizard$status=="infected"]),xlab="Infected RBC Count", main = "")
hist(log(lizard$rbc.count[lizard$status=="noninfected"]),xlab="Non Infected RBC Count", main = "")
install.packages("gplots")
library(gplots)
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
#####################
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width (cm)", connect = FALSE, n.label = FALSE)
chick <- read.table("chick.csv", header=T, sep=",")
ad.test(chick$chick.weight[chick$feed.type == "linseed"])
ad.test(chick$chick.weight[chick$feed.type == "sunflower"])
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
boxplot(chick$chick.weight ~ chick$feed.type, data=chick,xlab = "Chick Feed Type", ylab = "Chick Weight (grams)")
#######################
lizard <- read.table("lizard.csv", header=T, sep=",")
ad.test(log(lizard$rbc.count[lizard$status == "infected"]))
ad.test(log(lizard$rbc.count[lizard$status == "noninfected"]))
hist(log(lizard$rbc.count[lizard$status=="infected"]),xlab="Infected RBC Count", main = "")
hist(log(lizard$rbc.count[lizard$status=="noninfected"]),xlab="Non Infected RBC Count", main = "")
t.test(lizard$rbc.count ~ lizard$status, alternative =
"two.sided", paired = F)
"two.sided", paired = F)
"two.sided", paired = F)
t.test(log(lizard$rbc.count ~ lizard$status, alternative =
"two.sided", paired = F))
t.test(log(lizard$rbc.count ~ lizard$status), alternative =
"two.sided", paired = F)
t.test(log(lizard$rbc.count ~ lizard$status), alternative =
"less", paired = F)
t.test(log(lizard$rbc.count) ~ lizard$status, alternative =
"less", paired = F)
boxplot(log(lizard$rbc.count(~lizard$status,xlab = "status", ylab = RBC Count (103 cells/mL)", col = red)")))
boxplot(log(lizard$rbc.count(~lizard$status,xlab = "status", ylab = "RBC Count (103 cells/mL)", col = red)")))
boxplot(log(lizard$rbc.count(~lizard$status,xlab = "status", ylab = "RBC Count (103 cells/mL)", col = red)"))
boxplot(log(lizard$rbc.count) ~lizard$status,xlab = "status", ylab = "RBC Count (103 cells/mL)", col = red)"))
boxplot(log(lizard$rbc.count) ~lizard$status,xlab = "status", ylab = "RBC Count (103 cells/mL)", col = "red")
boxplot(log(lizard$rbc.count) ~lizard$status,xlab = "status", ylab = "RBC Count (103 cells/mL)", col = "red"))
boxplot(log(lizard$rbc.count) ~ lizard$status, xlab = "status", ylab = "RBC Count (103 cells/mL)", col = "red")
triglycerides <- read.table("triglycerides.csv", header=T, sep=",")
ad.test(triglycerides$triglycerides[triglycerides$treatment=="before"]- triglycerides$triglycerides[dataset$treatment=="after"])
ad.test(triglycerides$triglycerides[triglycerides$treatment=="before"]- triglycerides$triglycerides[dataset$treatment=="after"])
ad.test(triglycerides$triglycerides[triglycerides$treatment=="before"]- triglycerides$triglycerides[triglycerides$treatment=="after"])
"less", paired = T)
t.test(triglycerides$[triglycerides$treatment=="before" ~ triglycerides$[triglycerides$treatment=="after"]), alternative =
"less", paired = T)
t.test(triglycerides$triglycerides=="before" ~ triglycerides$treatment=="after"], alternative =
t.test(triglycerides$triglycerides=="before" ~ triglycerides$treatment=="after", alternative =
"less", paired = T)
t.test(triglycerides$triglycerides ~ triglycerides$treatment, alternative = "less", paired = T)
boxplot(triglycerides$triglycerides ~ triglycerides$treatment)
boxplot(triglycerides$triglycerides ~ triglycerides$treatment,xlab = "Triglyceride Treatment", ylab = "Triglyceride Level", col = "red"))
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level", col = "blue"))
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level", col = "blue")
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue")
install.packages("gplots")
library(gplots)
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
#####################
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width (cm)", connect = FALSE, n.label = FALSE)
chick <- read.table("chick.csv", header=T, sep=",")
ad.test(chick$chick.weight[chick$feed.type == "linseed"])
ad.test(chick$chick.weight[chick$feed.type == "sunflower"])
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
boxplot(chick$chick.weight ~ chick$feed.type, data=chick,xlab = "Chick Feed Type", ylab = "Chick Weight (grams)")
#######################
lizard <- read.table("lizard.csv", header=T, sep=",")
ad.test(log(lizard$rbc.count[lizard$status == "infected"]))
ad.test(log(lizard$rbc.count[lizard$status == "noninfected"]))
hist(log(lizard$rbc.count[lizard$status=="infected"]),xlab="Infected RBC Count", main = "")
hist(log(lizard$rbc.count[lizard$status=="noninfected"]),xlab="Non Infected RBC Count", main = "")
t.test(log(lizard$rbc.count) ~ lizard$status, alternative = "less", paired = F)
boxplot(log(lizard$rbc.count) ~ lizard$status, xlab = "status", ylab = "RBC Count (103 cells/mL)", col = "red")
triglycerides <- read.table("triglycerides.csv", header=T, sep=",")
ad.test(triglycerides$triglycerides[triglycerides$treatment=="before"]- triglycerides$triglycerides[triglycerides$treatment=="after"])
t.test(triglycerides$triglycerides ~ triglycerides$treatment, alternative = "less", paired = T)
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue")
install.packages("gplots")
boxplot(triglycerides$treatment~triglycerides$triglycerides, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue")
boxplot(triglycerides$treatment ~ triglycerides$triglycerides, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue")
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue")
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue", swtich = TRUE)
triglycerides$treatment <- factor(triglycerides$treatment,c("before", "after,"))
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue")
triglycerides$treatment <- factor(triglycerides$treatment,c("before", "after"))
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue")
install.packages("gplots")
library(gplots)
library(nortest)
iris <- read.table("iris.csv", header=T, sep=",")
ad.test(iris$sepal.width[iris$species == "setosa"])
ad.test(iris$sepal.width[iris$species == "virginica"])
# If the p is high, let the null fly. If the p is low, let the null go.
t.test(iris$sepal.width ~ iris$species, alternative =
"two.sided", paired = F)
#####################
plotmeans(iris$sepal.width ~ iris$species, xlab = "Species", ylab = "width (cm)", connect = FALSE, n.label = FALSE)
chick <- read.table("chick.csv", header=T, sep=",")
ad.test(chick$chick.weight[chick$feed.type == "linseed"])
ad.test(chick$chick.weight[chick$feed.type == "sunflower"])
wilcox.test(chick$chick.weight ~ chick$feed.type, alternative =
"two.sided", paired = F)
boxplot(chick$chick.weight ~ chick$feed.type, data=chick,xlab = "Chick Feed Type", ylab = "Chick Weight (grams)")
#######################
lizard <- read.table("lizard.csv", header=T, sep=",")
ad.test(log(lizard$rbc.count[lizard$status == "infected"]))
ad.test(log(lizard$rbc.count[lizard$status == "noninfected"]))
hist(log(lizard$rbc.count[lizard$status=="infected"]),xlab="Infected RBC Count", main = "")
hist(log(lizard$rbc.count[lizard$status=="noninfected"]),xlab="Non Infected RBC Count", main = "")
t.test(log(lizard$rbc.count) ~ lizard$status, alternative = "less", paired = F)
boxplot(log(lizard$rbc.count) ~ lizard$status, xlab = "status", ylab = "RBC Count (103 cells/mL)", col = "red")
triglycerides <- read.table("triglycerides.csv", header=T, sep=",")
ad.test(triglycerides$triglycerides[triglycerides$treatment=="before"]- triglycerides$triglycerides[triglycerides$treatment=="after"])
t.test(triglycerides$triglycerides ~ triglycerides$treatment, alternative = "less", paired = T)
triglycerides$treatment <- factor(triglycerides$treatment,c("before", "after"))
boxplot(triglycerides$triglycerides ~ triglycerides$treatment, xlab = "Triglyceride Treatment", ylab = "Triglyceride Level (mmol/L)", col = "blue")
